#pragma once
#include <kvasir/bit/utility.hpp>
namespace kvasir {
    namespace chip {
@[if peripheral.description]@
    /* @(get_str(peripheral.description)) */
@[end if]@
@[def emit_register(peripheral, reg, cluster)]@
@{    reg_name = format_register_name(peripheral, reg) }@
    namespace @(reg_name) {  @[if reg.description]/* @(get_str(reg.description)) */@[end if]
        using Addr = bit::Address<@(register_address(peripheral, reg, cluster)),
                                       @(no_action_if_zero_bits(reg)),
                                       @(no_action_if_one_bits(reg)),
                                       @(register_type(reg))>;
@{fields = reg.find_all('field')}@
@[if len(fields) == 0]@
@{    fields.append(expand_register_as_field(reg, properties))}@
@[end if]@
@[    for field in fields]@
@[        if field.description]@
        /* @(get_str(field.description)) */
@[        end if]@
@{        field_name = format_field_name(field) }

@[        if use_enumerated_values(field)]@
        enum class @(field_name.capitalize())Val : @(register_type(reg)) {
@[            for v in field.find_all('enumeratedValue')]@
@{                value_name = format_enum_value_name(v) }@
@[                if not is_default(v)]@
            @(value_name)=@(format_enum_value(v)),@[if v.description]  /* @(get_str(v.description)) */@[end if]
@[                end if]@
@[            end for]@
        };

        constexpr bit::FieldLocation<Addr,
                                          bit::maskFromRange(@(msb(field)), @(lsb(field))),
                                          bit::@(access(field)),
                                          @(field_name.capitalize())Val> @(field_name){};

        namespace @(get_str(field.find('name')).capitalize())ValC {
@[            for v in field.find_all('enumeratedValue')]@
@{ value_name = format_enum_value_name(v) }@
@{              outer_namespace = reg_name}@
@[              if cluster]@
@{              outer_namespace = format_namespace(get_str(cluster.find('name'))) + '::' + reg_name}@
@[              end if]@
            constexpr bit::FieldValue<decltype(@(outer_namespace)::@(field_name))::Type,
                                          @(field_name.capitalize())Val::@(value_name)> @(value_name){};
@[            end for]@
        }  // @(field_name.capitalize())ValC
@[        else]@
        constexpr bit::FieldLocation<Addr,
                                          bit::maskFromRange(@(msb(field)), @(lsb(field))),
                                          bit::@(access(field)),
                                          @(register_type(reg))> @(field_name){};
@[        end if]@
@[    end for]@
    }  // namespace @(reg_name)
@[end def]@

@[for cluster in peripheral.find_all('cluster')]@
@{ cluster_name = format_namespace(get_str(cluster.find('name'))) }@
    namespace @(cluster_name) {
@[for reg in cluster.find_all('register')]
@{ print emit_register(peripheral, reg, cluster) }@
@[end for]@
    }  // namespace @(cluster_name)
@[end for]@

@[for reg in get_registers(peripheral)]@
@{ print emit_register(peripheral, reg, None) }@
@[end for]@
    }  // namespace chip
}  // namespace Kvasir
